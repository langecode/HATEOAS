swagger: '2.0'
info:
  title: A Simple Banking API HATEOAS HAL Sample
  version: '0.0.1'
  description: >
    This "Simple Banking API Sample" serves to exemplify a way of using HATEOAS in the form of HAL in the API in and easy and intuitive way.
    Furthermore it points to elaborated examples and what would be nice to have supported in a better way in the REST implementations and
    possibly in Swagger in order have an easy way to use the full potential of HATEOAS in the form of HAL ind services.
   
    
    ## API Description
    
    This API show a very simple set of resources that emulates three micro-serviceswhich are: account, payment and Person.
    The Idea is to create everything as one large single Swagger file and decompose that into some sections: e.g. a general section, 
    a capabilities section, where the various API capabilities can be inported etc.  
    
    ## General Principles
    
    A semantic REST API is using and thus also HATEOAS in form af the hal specification.
    The API can be versioned at the structural level by means of a HTTP Header and at the content level in each endpoint by means of the content-type.
    
    ## HTTP Headers used
    
    A number os headers are used.
    
    * `X-Log-Token` for corelating a number activities between service and consumers of the service.

    * `X-Client-Version` for identification of a client version and its contract.

    * `X-Service-Generation` to signal a non-current structure of the API (saves known redirects from a client perspective)
    
    * `Accept` is used to signal what content the consumer wished and the version and projection can be specified. 

    ### Corelation between service (Server) and consumer (Client)
    
    A `X-Log-Token` header is used to give a client the opportunity to find a number of calls and acitivities related to calls beloging to that context. 
    If the client includes a `X-Log-Token` header and a value associated with that, the value will be ectended with a timetick initally to ensure uniqueness.
    The original `X-Log-Token` is returned in every response from the service, the client must include the unique token received in the response in the 
    following requests if the corelation is still what the client wants. If the client does not include a `X-Log-Token` the service creates a unique token 
    and returns that in the response and the client can use that.  
    
    ### Client Identifier
    
    The `X-Client-Version` header is used for identification of the client version and is required in order for a client to successfully operate on resources. The version in acording to semver-org    
    
    ### Versions
    
    There exists two major forms of versioning: one is related to the structure of the API, the other is related to the contents in each endpoint in the API.
   
    The two different aspects are handled in each their dedicated fashion. 
   
    The `X-Service-Generation` HTTP header is used for signalling the version of the API structure instead of having the version as a part of the baseURL. 
   
    The content-type includes version information and is returned in every response from the service. The content-type can do that is a couple of ways: 
    
      * using `"_links": { "href": "..."}` with no `"type"` will point to the newest and current content at the referenced endpoint.
    
      * using  `"_links": { "href": "...", "type": "application/hal+json;v=1"}` with `"type"` will point to the version listed and in this case that is the version 1 at the refrenced endpoint.
    
      The client must know if a problem has occurred in a situation, where the contents from a service endpoint was updated in a way that this particular client could not cope with and therefore it must know what version works and this the hal specification can be used decorate the `"_links":` object with the version of the content that it understands. That lets the client include the understandable content-type as defined in `"_links":` and include that as the value of the "Accept" header.
      An example of such client side decorated response from a server, where the defaault an newest content-type are "overwritten" by the type for the users. 
    
    
        {
          "label": "Budget Account",
          "currency": "DKK",
          ...
          "_links": {
            "transactions": [{
                "href": "accounts/1234-567890/transactions/987654321"
              }, {
                "href": "accounts/1234-567890/transactions/987654322"
              }, {
                "href": "accounts/1234-567890/transactions/987654323"
              }
            ],
            "users": {
              "primary": {
                "href": "users/hans-b-hansen-13-09-1234",
                "type": "application/hal+json;v=1"
              },
              "coUsers": [{
                  "href": "users/frederikke-b-hansen-16-07-6789",
                  "type": "application/hal+json;v=1"
                },{
                  "href": "users/ulla-b-hansen-23-03-4567",
                  "type": "application/hal+json;v=1"
                }]
            }
          }
        }
    
    If a projection (a given view on e.g. the user is needed) that may be included in the content-type as well, if a matching producer is available in the service that will be used. the version is referrring to the structures and contents of the josn response from a given endpoint. It is not the historical state of a user object. Examples of the versions of content by vaue in the `Accept` header below:
    
    * `"application/hal+json;concept=user;v=1"` for the complete user json in hal format
    
    * `"application/hal+json;concept=user-basic;v=1"` for the basic user information in hal jsin format
    
    * `"application/hal+json;concept=user-basic"` for the newest version of basic user information in hal format
    
    * `"application/hal+json"` for the newest version of user information in hal format
    
    
    It is possible to express the same without using the parameters as shown above using:
    
    
    * `"application/hal+json+user+1"` for the complete user json in hal format
    
    * `"application/hal+json+user-basic+1"` for the basic user information in hal jsin format
    
    * `"application/hal+json+user-basic"` for the newest version of basic user information in hal format
    
    ## API Capability Set
    
    In every API of a certain size a number of capabilities are used. These capabilities consists of a particular set of functionality. This functionality can be divided into the following capabilities:
    
    
    
         Selection:    `select` 
                       - selecting objects by attribute value(s) for response
    
         Sorting:      `sort` 
                       - sorts objects descending and ascending by 
                         attribute(s) for response
    
         Temporal:     `interval` 
                       - limits relevant objects in desired respone 
                         to be within a certain time frame
    
         Pagination:   `elements` 
                        - specifies the elements in a range desired 
                          to be in response
    
         Filtering:   `filter` 
                       - ask for excelusion or inclusion of particular 
                         attributes or objects in response
    
         Composition: `embed` 
                      - ask for the inclusion of "related" objects and 
                        projection into the response.
    
    
    These capabilities may be applied individually to endpoints in APIs.
    The user of the API endpoint can see what capability/ies is/are supported at each endpoint by looking at the for tags like select, sort, paginate etc. The Swagger tags are used here to achieve an easy way to show the capabilities in each endpoint as can be seen further down in the Swagger speecification.
    
    Another perspective that is often seen in APIs is the use of technical keys (potentially UUIDs) which are semantically poor, but often seen as a necessety for sensitive keys such as social security numbers. In order to avoid having these sensitive information leaked to logs and other places, there is a need for bringing these keys into the body of a request and a non-sensitive key is going to help. The problem with an UUID'ish key is that the developer experience is not optimal. Therefore it would be a nice thing to get some form of consensus on a derived capability like :
    
          Sensitive Semantic ID deconstruction 
          - generation of non-sensitive semantic key for objects that has a sensitive
            semantical key in the form of something that has a better developer
            experience than e.g. UUIDs can offer.
    
    ### Selection API Capability
    
    Selection by criteria(s) is done using a Query Parameter called `select`. 
    
        The syntax is: select="<attribute>::<value>|<atribute>::<value>|..."
    
    
    The usage can be examplified by e.g. asking for accounts having a balance equal to 100.
    Currency is omitted here on purpose.
    
    
    #### The concrete url would look like: 
   
         <https://banking.services.sample-bank.dk/acccounts?select="balance::100">
         
         "balance::100"
         which returns accounts having an exact balance of 100. 

    #### Another example:

        <https://banking.services.sample-bank.dk/acccounts?select="balance::100+|balance::1000-">
        
        select="balance::100+|balance::1000-"
        which returns accounts having an balance between 100 and 1000 (both inclusive).
    
    ### Sorting API Capability
    
    Sorting is done using a `sort` Query Parameter.
    Sorting can be done ascending (default) or descending
    
          The syntax is: sort="<attribute>+/-|<atribute>+/-|..."
    
    The usage can be examplfied as an
    
    #### Example:
    
        <https://banking.services.sample-bank.dk/acccounts?sort=balance> 
        which returns an ascending set of accounts sorted by balance
    
    
    #### Another example is: 
    
        <https://banking.services.sample-bank.dk/acccounts?select=balance|lastUpdate-> 
        which returns a set of account sorted decending by 
        lastUpdate and ascending by balance. 
    
    ### Temporal API Capability
    
    Temporal aspects are handled using the `interval` Query Parameter.
    
    
          The syntax is: interval="<now/from/to/+/-##d/######>|<now/from/to/+/-##d/######>"
    
    #### Example:
    
        <https://banking.services.sample-bank.dk/accounts/1234-56789/transactions?interval="from::-14d|to::now">
        which returns the transactions from a specific account within the last 14 days
    
    #### Example:
    
        <https://banking.services.sample-bank.dk/accounts/1234-56789/transactions?interval="from::1476449846|to::now">
        
        <https://banking.services.sample-bank.dk/accounts/1234-56789/transactions?interval="from::1476449846">
        
        <https://banking.services.sample-bank.dk/accounts/1234-56789/transactions?interval="at::1476449846">
        
        The latter three returns the transactions from a specific account 
        within the last day assuming now is friday the. 
        14th of Octiber 2016 UTC time.
    
    ### Pagination API Capability 
    
    Pagination of responses is obtained by using the Query parameter `elements`.
    The Query Parameter `element` signals the initial element and the last element that is desired to be part of the response.
    
        The syntax is: elements="<startingFrom>|<endingAt>" both inclusive.
    
    #### Example:
    
         <https://banking.services.sample-bank.dk/accounts/1234-56789/transactions?elements="10|30"> 
         which returns element 10 as the first entry in the json 
         response and element 30 as the last entry in the reponse.
    
    
    A maximum element size is defined here max size is 500 elements
    
    ### Filtering API Capability
    
    The Query parameters `filter` is used for signalling to the server that a dynamic projection is desired as the reponse from the service. The service is not obliged to be able to do that, but may return the standard projection of the objects given for that concrete endpoint. This can be used for discovery of what projections service consumers would like to have and help evolving the API to stay relevant and aligned with the consumers use of the service.
    
        The syntax is: filter="<attribute>::+/-|<attribute>::+/-" 
        + means include only
        - means exclude only
        
    
    
    #### Example:    
    
        <https://banking.services.sample-bank.dk/accounts/1234-56789?filter="balance::-|name::-"> 
        which ideally returns a account object in the response without balance 
        and name attributes.
        The service may however in the event that this is not supported,
        choose to return a complete object and not this sparse dynamic view. 
    
    
    #### Example:
    
        <https://banking.services.sample-bank.dk/accounts/1234-56789?filter="balance::+|name::+">
        which ideally returns a account object in the response with only balance
        and name attributes.
        The service may however in the event that this is not supported,
        choose to return a complete object and not this sparse dynamic view. 

    ### Composition  API Capability 
    
    Composition is about enabling the consumers of services, the Query Parameter `embed` is used to signal to the service that the consumer would like to have a certain assumed related object included as a part of the response if possible.
    
        The syntax is: embed="<concept>::<projection>|<concept>::<projection>|..." 
        
        
    #### Example:
    
        <https://banking.services.sample-bank.dk/accounts/1234-56789?embed="transaction::list|owner::sparse"
        
        embed="transaction::list|owner::sparse"
        which ideally will return a json response including `_links` and `_embeddded` objects inside the response containing either a map or array of transactions with links in the `_links` object and the desired projection in the `_embedded` object for both owner and transactions. 
        
      
    The service can choose to return just the accounts inclusing links to transactions under the `_links` object as this is allowed by HAL. The Query Parameter can be used for evolving the service to match the desires of consumers - if many consumers are having the same wishes for what to embed - the owners of the service could start considering whether they want to include more in the resposnes and endure the added coupling between this service and the service that may deliver the embedded information. This coupling should of course not ne synchronous.
    
    ### Sensitive Id decomposition 
  
    The creation of an id can be challenging especially if the true semantic id is protected by law, which is the case for people. Therefore a either a UUID is suggested or a semi-semantic approach like firstName-middleName-sirName-dayInMonth-MonthInYear-Sequence, that allows for a human readable - yet not revealing id for a person.
    
    Other suggested methids for doing has been to create a hash(sensitive sementic key), which might work but will be woulnerable for a brute force reengineering effort. The reponse to that is often to salt it, that is salt(hash(sensitive sementic key)), and that is ok but is seems merely to be a very difficult way to create a UUID, which means we have a key that is developer unfriendly - at least compared to the more human readable key consisting of recoqnizable fragments from the real world.
    
    ## Ressilience
    
    
    ### Limits
    
    The server-side service might be busy for one or the other reason and need to tell the client that. Infact it is trying to say "Be patient - I am rather busy right now". Therefore the server returns a `503` error code (see response codes below) with a *Retry-After* header stating the time
    when it is ecpected that the server is no longer busy and can serve a consumer again.
    
    If the server-side intercepts the consumer it may choose to return a 429 Too many Requests with a response stating that "You are limited to XXXX requests per hour per `access_token` or `client_id` in total per  per `timeunit` overall. 
    
    ## Responses
    The responses from calling resources in the API adheres to the specificsation of HTTP 1.1 and thus the status code, the headers used are found in that specification.
    
    ### Status Codes
    
    #### Information on status code and headers are found under:
    
          Status codes:
          <https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>
          
          Headers:
          <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>
    
  
    A couple of response codes will be described here as inspiration, but the most important thing is to work with the protocol and thus to read and understand what the status codes means and how they fit into the current situation in the API and write explicitly what the client can expect in every situation in order to make the API as developer friendly as possible. 
    
    #### 200 OK
    
    The 200 OK response signal eveything went ok and there will usually be a response that contains a body corresponding to the initiating request's `Accept` header. 
    
    #### 201 Created
    
    The 201 Created follows after a successful `POST` or `PUT` and states where the newly resource was created in a `Location` header.
    
    #### 202 Accepted
    
    The 202 Accepted response signals that the request was understood and the response will follow later, the response should state information can be obtained later concerning the request for the resource returning the 202. This is signalled in the `Location` header, to be nice the expectations of the client can be set using the `Retry_After` and issue a timeframe for when it makes sense to ask for a status again from the client.
    
    ##### Headers
    
    ```
    Location: http://get/the/new/status/location
    
    Retry-After: 30
    ```
  
    #### 301 Moved Permanently
    
    The 301 is issued if a client askes for a ressource that is no longer at the place it used to be. AS an example this could be a resource that has moved to a different part of the API. In that case a 301 is returned with a `Location` header containing the new position.
    
    ##### Headers
    
    ```
    Location: http://this/is/the/new/location
    ```
    
    #### 400 Bad Request
    
    The 400 response states that this request was wrong and should not be retried
    
    #### 401 Unauthorized
    
    The 401 response states that this request did not have user authentification and that usually means that the client needs to either have a contract for that resource, authenticate the user, renew a token or ... in order to get access to the requested resource.
    
    
    #### 403 Forbidden
    
    The 403 response states that this request have user authentification but does not have sufficient authorizations to acess the resource.
    
    #### 404 Not Found
    
    The 404 response states that the resource requested did not exist.
    
    #### 409 Conflict

    The 409 response states that the attempted request for the resource is resulting in a form of conflict, which the client must resolve before retrying. This could be trying to POST changes to an object that would cause the object to be in an errounous state.
    
    #### 503 Service Unavailable

    The 503 response states that the server for some reason is unavailable.
    
    ##### Headers
    
    ```
    Retry-After: Sat, 31 Dec 2016 23:59:59 GMT
    ```
    
    or
    
    ```
    Retry-After: 120
    ```
    
    ## Service terms
    
    The terms of using the service is as follows, the contract foound at <https://sample-bank.dk/services/contracts/2345678> states the general terms for using this service. Consumers can create their own individual contract and terms for usage at <https://sample-bank.dk/services/consumers>
    
  termsOfService: Sample-Bank internal only
  contact:
    name: Sample-Bank Application Architecture
    url: 'http://www.sample-bank.dk'
    email: mpr@sample-bank.dk
  license:
    name: (C) Sample-Bank 2016
    url: 'http://www.sample-bank.dk'
host: banking.services.sample-bank.dk
################################################################################
#                                  Security                                    #
################################################################################
securityDefinitions:
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://banking.services.sample-bank.dk/token.oauth2?grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=JWT
    scopes:
      owners: get access to own account
      coOwners: get access to coowned accounts
      poa: get access on a owners behalf
  key:
    type: apiKey
    in: header
    name: access_token
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - oauth:
    - owners
    - coOwners
    - poa
  - key: []
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths (If version should be part of path it could go here!)
basePath: /
tags:
  - name: select
    description: The resource supports selection of entries based on attribute values.
  - name: sort
    description: >-
      The resource supports sorting of entries based on attribute values and
      direction.
  - name: paginate
    description: The resource supports paginations of entries based on page and page size.
  - name: filter
    description: >-
      The resource supports filtering of returned json objects based on
      attribute values.
  - name: compose
    description: >-
      The resource supports embedding of related json objects in the returned
      result based on relation and views/projections.
  - name: temporal
    description: The resource supports temporal selection of returned objects.
paths:
  /accounts:
    get:
      summary: Get an account listing
      description: Returns the accounts that the identified user has granted access to obtain.
      security:
       - Bearer: []
      consumes:
        - application/json
        - application/json;v=1
        - application/json;concept=Account;v=1
      produces:
        - application/json
        - application/json;v=1
        - application/json;concept=Account;v=1
        - application/json+account+1
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Accounts'
          examples:
            application/hal+json;concept=Account;v=1: 
              _embedded:
                accounts:
                  - no: '1234-56789'
                    capability: 
                    name: Student Account
                    owner: Tom Hansen
                    balance :
                      amount: 1098
                      currency: DKK
                    lastActivity: '2016-10-12'
                    _link:
                      owner: 
                        href: https://https://banking.services.sample-bank.dk/persons/tom-hansen-0304-32
                      transactions:
                        name: "transactions"
                        href: >-
                          https://banking.services.sample-bank.dk/accounts/1234-56789/transactions{?elements}
                        templated: true  
                        curies: 
                          - name: oprs
                            href: https://banking.services.sample-bank.dk/{rel}
                            templated: true
                        oprs:transfer-to-account:
                          href: accounts/1234-56789/transfer
                          templated: true
                        oprs:payment:
                           href: payment-instructions/1234-56789/
                           templated: true
                  - no: '1234-67891'
                    name: Nem Konto
                    owner: Viggo & Thelma Andersen Hansen WebShop 
                    coOwner: Mads Andersen Hansen
                    balance: 
                      amount: -1998905.32
                      currency: DKK
                    lastActivity: '2016-09-30'
                    _link:
                      owner: 
                        href: https://https://banking.services.sample-bank.dk/persons/tom-andersen-hansen-0509-1
                      coOwner:
                        href: https://https://banking.services.sample-bank.dk/persons/mads-andersen-hansen-0112               
                      transactions:
                        href: >-
                          https://banking.services.sample-bank.dk/accounts/1234-67891/transactions{?elements}
                        templated: true
              _links:
                self:
                  href: https://banking.services.sample-bank.dk/accounts
                  title: All accessible accounts
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Service not available
          schema:
             $ref: '#/definitions/Error'
        '503':
          description: Service not available now - try later
  '/accounts/{no}/transactions':
    get:
      tags:
      - search
      - sort
      - paginate
      - temporal
      summary: Get transactions for one account
      consumes:
        - application/json
      produces:
        - application/hal+json;v=1
        - application/hal+json;concept=Account;v=1
        - application/hal+json+account+1
      parameters:
        - name: no
          type: string
          in: path
          description: Account Id \d{4}-\d{5}
          required: true
        - name: select
          type: string
          in: query
          description: searching based on attributes in transaction
          required: false
        - name: sort
          type: string
          in: query
          description: sort based on attributes in transaction
          required: false
        - name: elements
          type: string
          in: query
          description: the starting page
          required: false
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Transactions'
          examples:
            application/hal+json;concept=Transaction;v=1: 
              _embedded:
                transactions:
                  - time: 2016-08-26 11:01
                    activity:
                      amount: 23.45
                      currency: DKK
                    balance: 2345.67
                    interestDate: 2016-08-27
                    flag: true
                    _links: 
                      self: 
                        href: accounts/1234-567890/transactions/987654321
                        title: Netto - Dankort ***7766
                      type:
                        href: expense-types/1001
                        title: Dagligvarer
                  - time: 2016-08-25 22:12,
                    amount: 
                      amount: 2345.67
                      currency: DKK
                    balance: 10000.00
                    interestDate: 2016-08-25
                    flag: true
                    _links:
                      self: 
                        href: accounts/1234-567890/transactions/987654322
                        title: ElGiganten - Master kort ***4455
                      type:
                        href: expense-types/1014
                        title: Telefon, Computer, Internet og Tv
                  - time: 2016-08-25 03:03
                    amount:
                      amount: -3.54
                      currency: USD
                    balance: 9976,66
                    interestDate: 2016-08-25
                    flag: true
                    _links: 
                      self:
                        href: accounts/1234-567890/transactions/987654323
                        title: Small things Inc. - VISA kort ***6655
                      type:
                        href: expense-types/1014
                        title: Telefon, Computer, Internet og Tv
        '400':
          description: Bad Request
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
            
  '/accounts/{no}/reconciled-transactions/{txId}':
    post:
      summary: Flag a transaction entries for one account allowing the immutable nature of the transaction to be preserved and allowing the client to cache the immutable transactions really hard. This "pattern" makes it possible to consider immutable objects that needs som form of decoration to be unaffected by this decoration.
      consumes:
        - application/json
      produces:
        - application/hal+json;v=1
        - application/hal+json;concept=DecoratedTransaction;v=1
        - application/hal+json+decorated-transaction+1
      parameters:
        - name: no
          in: path
          description: Account Id \d{4}-\d{10}
          required: true
          type: string
        - name: txId
          in: path
          description: Transaction Id 
          required: true
          type: string
        - name: reconcile
          in: body
          description: flag or unflag transaction and add a note to that particular transaction if desired
          required: true
          schema:
            type: object
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '202':
          description: Accepted
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
definitions:
  Amount:
    type: object
    properties:
      amount:
        type: number
        format: double
      currency:
        type: string
        pattern: \w{3}
  Error:
    type: object
    properties:
      error:
        type: string
      message:
        type: string
      timestamp:
        type: string
        format: date-time     
  Person:
    type: object
    properties:
      _links:
        type: object
        items:
          $ref: '#/definitions/HALLink'
      sid: 
        type: string 
        pattern:  \[a-z]+-[a-z]+-\d{4}-*\d*
      fullName:
        type: string
      cpr:
        type: string
        pattern: \d{10}
  Account:
    type: object
    properties:
      _links:
        type: object
        items:
          $ref: '#/definitions/HALLink'
      _embedded:
        type: object
        items:
          $ref: '#/definitions/Transactions'
      no:
        type: string
        pattern: \d{4}-\d{10}
      balance:
        $ref: '#/definitions/Amount' 
      owner:
        $ref: '#/definitions/Person'
      coOwner:
        $ref: '#/definitions/Person'
  Transactions:
    type: object
    properties:
      _embedded:
        type: object
        items:
          $ref: '#/definitions/Transaction'
      _links:
        type: object
        items:
          $ref: '#/definitions/HALLink'     
  Transaction:
    type: object
    properties:
      _links:
        type: object
        items:
          $ref: '#/definitions/HALLink'
      amount:
        $ref: '#/definitions/Amount'
      balance:
        $ref: '#/definitions/Amount'
      description:
        type: string
      date:
        type: string
        format: date     
  Accounts:
    type: object
    properties:
      _embedded:
        type: object
        items:
          $ref: '#/definitions/Account'
      _links:
        type: object
        items:
          $ref: '#/definitions/HALLink'         
  HALLink:
    type: object
    properties:
      href:
        type: string
      name:
        type: string  
      title:
        type: string
      type:
        type: string
        